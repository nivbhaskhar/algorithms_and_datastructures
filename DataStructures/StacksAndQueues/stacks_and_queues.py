# -*- coding: utf-8 -*-
"""stacks_and_queues.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N-PnwKqxURpDwb3fo0GuvEJpj3T_aElc

# Implementing stacks using lists

Stacks : Last in, first out

Start of list = bottom of stack
End of list = top of stack
"""

#Say we have a stack where Job 0 is at the bottom, then Job 1, then Job 5
my_stack = [0, 1, 5]

#pushing Job 6 to the stack
#O(1) operation
my_stack.append(6)

my_stack

#popping the top of the stack
#O(1) operation
my_stack.pop()

my_stack

"""# Implementing queues using lists

Queues : First in, first out

Start of list = end of queue

End of list = start of queue
"""

#Say we have a queue where Person 5 is at the front, then Person 1, then Person 0
my_queue = [0, 1, 5]

#Person 6 joins the queue

#list_name.insert(j, val) inserts val into list before position j
#O(n) operation where n is size of list
my_queue.insert(0,6)

my_queue

#Dequeing 
#O(1) operation

my_queue.pop()

my_queue

"""#Implementing stacks using deque

Stacks : Last in, first out

deque data structure has methods:

 - append(value), appendleft(value), 

 - pop(), popleft(), 

 - extend(iterable), extendleft(iterable)
"""

import collections 
  

#Say we have a stack where Job 0 is at the bottom, then Job 1, then Job 5
my_stack_deque = collections.deque([0,1,5])

#pushing Job 6 to the stack
#O(1) operation
my_stack_deque.append(6)

my_stack_deque

#popping the top of the stack
#O(1) operation
my_stack_deque.pop()

my_stack_deque

"""#Implementing queues using deque


Queues : First in, first out

Start of deque = end of queue

End of deque = start of queue
"""

#Say we have a queue where Person 5 is at the front, then Person 1, then Person 0
my_queue_deque = collections.deque([0, 1, 5])

#Person 6 joins the queue
#O(1) operation

my_queue_deque.appendleft(6)

my_queue_deque

#Dequeing 
#O(1) operation

my_queue_deque.pop()

my_queue_deque

